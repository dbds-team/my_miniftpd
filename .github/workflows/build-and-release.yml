name: Build and Release

on:
  push:
    tags:
      - 'v*'  # 只在推送v开头的标签时触发

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux builds
          - os: ubuntu-latest
            name: linux-x64
            arch: x64
            build_flags: ""
          - os: ubuntu-latest
            name: linux-x86
            arch: x86
            build_flags: "BUILD_32BIT=1"
          
          # macOS builds
          - os: macos-latest
            name: macos-x64
            arch: x64
            build_flags: ""
          - os: macos-14  # M1/M2 runners
            name: macos-arm64
            arch: arm64
            build_flags: ""
          
          # FreeBSD builds using latest cross-platform-actions
          - os: ubuntu-latest
            name: freebsd-x64
            arch: x64
            use_freebsd: true
            freebsd_arch: x86-64
            build_flags: ""
          - os: ubuntu-latest
            name: freebsd-x86
            arch: x86  
            use_freebsd: true
            freebsd_arch: x86-64
            build_flags: "BUILD_32BIT=1"

    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
    
    # Setup 32-bit environment on Ubuntu
    - name: Setup 32-bit environment
      if: matrix.arch == 'x86' && runner.os == 'Linux'
      run: |
        sudo dpkg --add-architecture i386
        sudo apt-get update
        sudo apt-get install -y gcc-multilib g++-multilib libc6-dev-i386 libcrypt-dev:i386

    # Build for FreeBSD using cross-platform-actions
    - name: Build for FreeBSD
      if: matrix.use_freebsd
      uses: cross-platform-actions/action@v0.26.0
      with:
        operating_system: freebsd
        version: '14.3'
        architecture: ${{ matrix.freebsd_arch }}
        shell: bash
        memory: 4G
        cpu_count: 2
        run: |
          echo "Building on FreeBSD ${{ matrix.freebsd_arch }}"
          uname -a
          
          # Install dependencies
          pkg install -y gmake gcc
          
          # Build the project
          gmake clean
          gmake RELEASE=1 ${{ matrix.build_flags }}
          
          # Check the binary
          file miniftpd
          ls -la miniftpd
          
          # Rename for upload
          mv miniftpd miniftpd-${{ matrix.name }}
          
          echo "FreeBSD build completed for ${{ matrix.name }}"

    # Regular build for Linux and macOS
    - name: Build
      if: "!matrix.use_freebsd"
      run: |
        make clean
        make RELEASE=1 ${{ matrix.build_flags }}
        mv miniftpd miniftpd-${{ matrix.name }}

    # Upload artifacts
    - name: Upload artifact
      if: always() && (success() || failure())
      uses: actions/upload-artifact@v4
      with:
        name: miniftpd-${{ matrix.name }}
        path: miniftpd-${{ matrix.name }}
        if-no-files-found: warn

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - uses: actions/checkout@v4
    
    # Download all artifacts
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    # Download and organize all artifacts
    - name: Download and organize artifacts
      run: |
        echo "=== Listing all downloaded artifacts ==="
        find artifacts -type f -ls
        
        echo "=== Organizing files ==="
        mkdir -p release_files
        
        # Find and copy all binary files
        find artifacts -name "miniftpd-*" -type f | while read file; do
          echo "Found binary: $file"
          filename=$(basename "$file")
          echo "Copying to release_files/$filename"
          cp "$file" "release_files/$filename"
          chmod +x "release_files/$filename"
        done
        
        echo "=== Files in release_files directory ==="
        ls -la release_files/ || echo "No files found"
        
        echo "=== Creating checksums ==="
        cd release_files
        for file in *; do
          if [ -f "$file" ]; then
            echo "Creating checksum for $file"
            sha256sum "$file" > "$file.sha256"
          fi
        done
        
        echo "=== Final release files ==="
        ls -la
        cd ..

    # Create Release
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: release_files/*
        generate_release_notes: true
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}