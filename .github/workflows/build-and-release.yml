name: Build and Release

on:
  push:
    tags:
      - 'v*'  # 只在推送v开头的标签时触发

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux builds
          - os: ubuntu-latest
            name: linux-x64
            arch: x64
            build_flags: ""
          - os: ubuntu-latest
            name: linux-x86
            arch: x86
            build_flags: "BUILD_32BIT=1"
          
          # macOS builds
          - os: macos-latest
            name: macos-x64
            arch: x64
            build_flags: ""
          - os: macos-14  # M1/M2 runners
            name: macos-arm64
            arch: arm64
            build_flags: ""
          
          # FreeBSD builds using cross-compilation
          - os: ubuntu-latest
            name: freebsd-x64
            arch: x64
            use_freebsd_cross: true
            target_arch: x86_64
            build_flags: ""
          - os: ubuntu-latest
            name: freebsd-x86
            arch: x86
            use_freebsd_cross: true
            target_arch: i686
            build_flags: "BUILD_32BIT=1"

    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
    
    # Setup 32-bit environment on Ubuntu
    - name: Setup 32-bit environment
      if: matrix.arch == 'x86' && runner.os == 'Linux'
      run: |
        sudo dpkg --add-architecture i386
        sudo apt-get update
        sudo apt-get install -y gcc-multilib g++-multilib libc6-dev-i386 libcrypt-dev:i386

    # Setup FreeBSD cross-compilation toolchain
    - name: Setup FreeBSD cross-compilation
      if: matrix.use_freebsd_cross
      run: |
        echo "Setting up FreeBSD cross-compilation for ${{ matrix.target_arch }}"
        
        # Install dependencies
        sudo apt-get update
        sudo apt-get install -y \
          build-essential autoconf automake libtool \
          flex bison gperf help2man libncurses5-dev \
          texinfo unzip wget curl git cmake ninja-build
        
        # Create workspace
        mkdir -p ~/freebsd-cross
        cd ~/freebsd-cross
        
        # Download and build a simplified FreeBSD cross-compiler
        # Using a pre-built toolchain approach for faster builds
        if [ "${{ matrix.target_arch }}" = "x86_64" ]; then
          TARGET_TRIPLE="x86_64-unknown-freebsd13"
          FREEBSD_ARCH="amd64"
        else
          TARGET_TRIPLE="i686-unknown-freebsd13" 
          FREEBSD_ARCH="i386"
        fi
        
        echo "TARGET_TRIPLE=$TARGET_TRIPLE" >> $GITHUB_ENV
        echo "FREEBSD_ARCH=$FREEBSD_ARCH" >> $GITHUB_ENV
        
        # Download FreeBSD base system for headers and libs
        wget -q "https://download.freebsd.org/ftp/releases/amd64/13.2-RELEASE/base.txz" -O base.txz
        mkdir -p sysroot
        tar -xf base.txz -C sysroot
        
        echo "FREEBSD_SYSROOT=$PWD/sysroot" >> $GITHUB_ENV
        
        # Install clang as cross-compiler (supports FreeBSD out of the box)
        sudo apt-get install -y clang
        
        echo "FreeBSD cross-compilation setup complete"
    
    # Build for FreeBSD using cross-compilation
    - name: Build for FreeBSD
      if: matrix.use_freebsd_cross
      run: |
        echo "Building for FreeBSD ${{ matrix.target_arch }}"
        
        # Setup cross-compilation environment
        export CC="clang"
        export CXX="clang++"
        export CFLAGS="--target=${{ env.TARGET_TRIPLE }} --sysroot=${{ env.FREEBSD_SYSROOT }} -static"
        export CXXFLAGS="--target=${{ env.TARGET_TRIPLE }} --sysroot=${{ env.FREEBSD_SYSROOT }} -static"
        export LDFLAGS="--target=${{ env.TARGET_TRIPLE }} --sysroot=${{ env.FREEBSD_SYSROOT }} -static"
        
        if [ "${{ matrix.target_arch }}" = "i686" ]; then
          export CFLAGS="$CFLAGS -m32"
          export CXXFLAGS="$CXXFLAGS -m32"
          export LDFLAGS="$LDFLAGS -m32"
        fi
        
        # Build using our Makefile with FreeBSD-specific settings
        make clean
        make CC="$CC" RELEASE=1 ${{ matrix.build_flags }}
        
        # Rename binary
        mv miniftpd miniftpd-${{ matrix.name }}
        
        # Verify the binary
        file miniftpd-${{ matrix.name }}
        ls -la miniftpd-${{ matrix.name }}

    # Regular build for Linux and macOS
    - name: Build
      if: "!matrix.use_freebsd_cross"
      run: |
        make clean
        make RELEASE=1 ${{ matrix.build_flags }}
        mv miniftpd miniftpd-${{ matrix.name }}

    # Upload artifacts
    - name: Upload artifact
      if: always() && (success() || failure())
      uses: actions/upload-artifact@v4
      with:
        name: miniftpd-${{ matrix.name }}
        path: miniftpd-${{ matrix.name }}
        if-no-files-found: warn

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - uses: actions/checkout@v4
    
    # Download all artifacts
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    # Download and organize all artifacts
    - name: Download and organize artifacts
      run: |
        echo "=== Listing all downloaded artifacts ==="
        find artifacts -type f -ls
        
        echo "=== Organizing files ==="
        mkdir -p release_files
        
        # Find and copy all binary files
        find artifacts -name "miniftpd-*" -type f | while read file; do
          echo "Found binary: $file"
          filename=$(basename "$file")
          echo "Copying to release_files/$filename"
          cp "$file" "release_files/$filename"
          chmod +x "release_files/$filename"
        done
        
        echo "=== Files in release_files directory ==="
        ls -la release_files/ || echo "No files found"
        
        echo "=== Creating checksums ==="
        cd release_files
        for file in *; do
          if [ -f "$file" ]; then
            echo "Creating checksum for $file"
            sha256sum "$file" > "$file.sha256"
          fi
        done
        
        echo "=== Final release files ==="
        ls -la
        cd ..

    # Create Release
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: release_files/*
        generate_release_notes: true
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}